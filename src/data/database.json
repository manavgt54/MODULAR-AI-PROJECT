[
  {
    "filename": "lecture3.pdf.pdf",
    "content": "STRING MANIPULATION,\nGUESS-and-CHECK, \nAPPROXIMATIONS, \nBISECTION\n(download slides and .pyfiles ĂŶĚ\u0003follow along!)\n6 . 0 0 0 1   L E C T U R E  3\n6.0001 LECTURE 3\n1\n\nLAST TIME\nstrings\nbranching –if/elif/else\nwhile loops\nfor loops\n6.0001 LECTURE 3\n2\n\nTODAY\nstring manipulation\nguess and check algorithms\napproximate solutions\nbisection method\n6.0001 LECTURE 3\n3\n\nSTRINGS\nthink of as a sequenceof case sensitive characters\ncan compare strings with ==, >, < etc.\nlen()is a function used to retrieve the lengthof the \nstring in the parentheses\ns = \"abc\"\nlen(s) evaluates to 3\n6.0001 LECTURE 3\n4\n\nSTRINGS\nsquare brackets used to perform indexinginto a string \nto get the value at a certain index/position\ns = \"abc\"\ns[0] evaluates to \"a\"\ns[1] evaluates to \"b\"\ns[2] evaluates to \"c\"\ns[3] trying to index out of bounds, error\ns[-1] evaluates to \"c\"\ns[-2] evaluates to \"b\"\ns[-3] evaluates to \"a\"\n6.0001 LECTURE 3\n5\nindex:   0  1 2     indexing always starts at 0\nindex:   -3 -2 -1    last element always at index -1\n\nSTRINGS\ncan slicestrings using [start:stop:step]\nif give two numbers, [start:stop], step=1by default\nyou can also omit numbers and leave just colons\n6.0001 LECTURE 3\n6\ns = \"abcdefgh\"\ns[3:6]evaluates to \"def\", same ass[3:6:1]\ns[3:6:2]evaluates to \"df\"\ns[::]evaluates to \"abcdefgh\", same as s[0:len(s):1]\ns[::-1]evaluates to \"hgfedbca\", same as s[-1:-(len(s)+1):-1]\ns[4:1:-2]evaluates to \"ec\"\n\nSTRINGS\nstrings are “immutable” –cannot be modified \ns = \"hello\"\ns[0] = 'y' gives an error\ns = 'y'+s[1:len(s)] is allowed,\ns bound to new object\n6.0001 LECTURE 3\n7\ns\n\"hello\"\n\"yello\"\n\nfor LOOPS RECAP\nforloops have a loop variable that iterates over a set of \nvalues\nfor varin range(4):   variterates over values 0,1,2,3\n<expressions>expressions inside loop executed \nwith each value for var\nfor varin range(4,6): variterates over values 4,5\n<expressions>\nrangeis a way to iterate over numbers, but a for loop \nvariable can iterate over any set of values, not just numbers!\n6.0001 LECTURE 3\n8\n\nSTRINGS AND LOOPS\nthese two code snippets do the same thing\nbottom one is more “pythonic” \ns = \"abcdefgh\"\nfor index in range(len(s)):\nif s[index] == 'i' or s[index] == 'u':\nprint(\"There is an ior u\")\nfor char in s:\nif char == 'i' or char == 'u':\nprint(\"There is an ior u\")\n6.0001 LECTURE 3\n9\n\nCODE EXAMPLE: \nROBOT CHEERLEADERS\nan_letters= \"aefhilmnorsxAEFHILMNORSX\"\nword = input(\"I will cheer for you! Enter a word: \")\ntimes = int(input(\"Enthusiasm level (1-10): \"))\ni= 0\nwhile i< len(word):\nchar = word[i]\nif char in an_letters:\nprint(\"Give me an \" + char + \"! \" + char)\nelse:\nprint(\"Give me a  \" + char + \"! \" + char)\ni+= 1\nprint(\"What does that spell?\")\nfor iin range(times):\nprint(word, \"!!!\")\n6.0001 LECTURE 3\n10\nfor char in word:\n\nEXERCISE\ns1 = \"mitu rock\"\ns2 = \"irule mit\"\nif len(s1) == len(s2):\nfor char1 in s1:\nfor char2 in s2:\nif char1 == char2:\nprint(\"common letter\")\nbreak\n6.0001 LECTURE 3\n11\n\nGUESS-AND-CHECK\nthe process below also called exhaustive enumeration\ngiven a problem...\nyou are able to guess a valuefor solution\nyou are able to check if the solution is correct\nkeep guessing until find solution or guessed all values\n6.0001 LECTURE 3\n12\n\nGUESS-AND-CHECK \n–cube  root\ncube = 8\nfor guess in range(cube+1):\nif guess**3 == cube:\nprint(\"Cube root of\", cube, \"is\", guess)\n6.0001 LECTURE 3\n13\n\nGUESS-AND-CHECK \n–cube  root\ncube = 8\nfor guess in range(abs(cube)+1):\nif guess**3 >= abs(cube):\nbreak\nif guess**3 != abs(cube):\nprint(cube, 'is not a perfect cube')\nelse:\nif cube < 0:\nguess = -guess\nprint('Cube root of '+str(cube)+' is '+str(guess))\n6.0001 LECTURE 3\n14\n\nAPPROXIMATE SOLUTIONS\ngood enough solution\nstart with a guess and increment by some small value\nkeep guessing if |guess\n3\n-cube| >= epsilon\nfor some small epsilon\ndecreasing increment size slower program\nincreasing epsilon less accurate answer\n6.0001 LECTURE 3\n15\n\nAPPROXIMATE SOLUTION \n–cube root\ncube = 27\nepsilon = 0.01\nguess = 0.0\nincrement = 0.0001\nnum_guesses= 0\nwhile abs(guess**3 -cube) >= epsilon:\nguess += increment\nnum_guesses+= 1\nprint('num_guesses=', num_guesses)\nif abs(guess**3 -cube) >= epsilon:\nprint('Failed on cube root of', cube)\nelse:\nprint(guess, 'is close to the cube root of', cube)\nand guess <= cube :\n6.0001 LECTURE 3\n16\n\nBISECTION SEARCH\nhalf interval each iteration\nnew guess is halfway in between\nto illustrate, let’s play a game!\n6.0001 LECTURE 3\n17\nGUESS\nGUESS\nGUESS\n\nBISECTION SEARCH \n–cube root\ncube= 27\nepsilon = 0.01\nnum_guesses= 0\nlow = 0\nhigh = cube\nguess = (high + low)/2.0\nwhile abs(guess**3 -cube) >= epsilon:\nif guess**3 < cube :\nlow = guess\nelse:\nhigh = guess\nguess = (high + low)/2.0\nnum_guesses+= 1\nprint 'num_guesses=', num_guesses\nprint guess, 'is close to the cube root of', cube\n6.0001 LECTURE 3\n18\n\nBISECTION SEARCH \nCONVERGENCE\nsearch space\n◦first guess: N/2\n◦second guess: N/4\n◦kth guess:N/2\nk\nguess converges on the order of log\n2\nNsteps\nbisection search works when value of function varies \nmonotonically with input\ncode as shown only works for positive cubes > 1 –why?\nchallenges modify to work with negative cubes!\nmodify to work with x < 1!\n6.0001 LECTURE 3\n19\n\nx< 1\nif x < 1, search space is 0 to x but cube root is greater \nthan x and less than 1\nmodify the code to choose the search space \ndepending on value of x\n6.0001 LECTURE 3\n20\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture2.pdf.pdf",
    "content": "BRANCHING, \nITERATION\n(download slides and .pyfiles ĂŶĚ\u0003follow along!)\n6 . 0 0 0 1   L E C T U R E   2\n6.0001 LECTURE 2\n1\n\nLAST TIME\nsyntax and semantics\nscalar objects\nsimple operations\nexpressions, variables and values\n6.0001 LECTURE 2\n2\n\nTODAY\nstring object type\nbranching and conditionals\nindentation\niteration and loops\n6.0001 LECTURE 2\n3\n\nSTRINGS\nletters, special characters, spaces, digits\nenclose in quotation marks or single quotes\nhi = \"hello there\"\nconcatenatestrings\nname = \"ana\"\ngreet = hi + name\ngreeting = hi + \"\"+ name\ndo some operationson a string as defined in Python docs\nsilly = hi + \"\"+ name * 3\n6.0001 LECTURE 2\n4\n\nINPUT/OUTPUT: print\nused to outputstuff to console\nkeyword is print\nx = 1\nprint(x)\nx_str= str(x)\nprint(\"my fav numis\", x, \".\", \"x =\", x)\nprint(\"my fav numis \" + x_str+ \". \" + \"x = \" + x_str)\n6.0001 LECTURE 2\n5\n\nINPUT/OUTPUT: input(\"\")\nprints whatever is in the quotes\nuser types in something and hits enter\nbinds that value to a variable\ntext = input(\"Type anything... \")\nprint(5*text)\ninputgives you a string so must cast if working \nwith numbers\nnum= int(input(\"Type a number... \"))\nprint(5*num)\n6.0001 LECTURE 2\n6\n\nCOMPARISON OPERATORS ON\nint,float, string\niand jare variable names\ncomparisons below evaluate to a Boolean \ni> j\ni>= j\ni< j\ni<= j\ni== jequalitytest, Trueif iis the same as j\ni!= jinequalitytest, Trueif inot the same as j\n6.0001 LECTURE 2\n7\n\nLOGIC OPERATORS ON bools\naand bare variable names (with Boolean values)\nnot aTrueif ais False\nFalseif ais True\na and bTrueif both are True\na or bTrueif either or both are True\n6.0001 LECTURE 2\n8\nABA and BA or B\nTrueTrueTrueTrue\nTrueFalseFalseTrue\nFalseTrueFalseTrue\nFalseFalseFalseFalse\n\nCOMPARISON EXAMPLE\npset_time= 15\nsleep_time= 8\nprint(sleep_time> pset_time)\nderive = True\ndrink = False\nboth = drink and derive\nprint(both)\n6.0001 LECTURE 2\n9\n\nIf right clear,\ngo right \nIf right blocked,\ngo forward\nIf right and \nfront blocked,\ngo left\nIf right , front, \nleft blocked,\ngo back\n6.0001 LECTURE 2\n10\n\nCONTROL FLOW -BRANCHING\nif <condition>:\n<expression>\n<expression>\n...\nif <condition>:\n<expression>\n<expression>\n...\nelse:\n<expression>\n<expression>\n...\nif <condition>:\n<expression>\n<expression>\n...\nelif<condition>:\n<expression> \n<expression>\n...\nelse:\n<expression>\n<expression>\n...\n<condition>has a value Trueor False\nevaluate expressions in that block if <condition> is True\n6.0001 LECTURE 2\n11\n\nINDENTATION\nmatters in Python\nhow you denote blocks of code\nx =  float(input(\"Enter a number for x: \"))\ny =  float(input(\"Enter a number for y: \"))\nif x == y:\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nelifx < y:\nprint(\"x is  smaller\")\nelse:\nprint(\"y is  smaller\")\nprint(\"thanks!\")\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nprint(\"x is smaller\")\nprint(\"y is smaller\")\n6.0001 LECTURE 2\n12\n\n=vs ==\nx = float(input(\"Enter a number for x: \"))\ny = float(input(\"Enter a number for y: \"))\nif x == y:\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nelifx < y:\nprint(\"x is smaller\")\nelse:\nprint(\"y is smaller\")\nprint(\"thanks!\")\n6.0001 LECTURE 2\n13\n\nLegend of Zelda –\nLost Woods\nkeep going right, \ntakes you back to this \nsame screen, stuck in \na loop\nif <exit right>:\n<set background to woods_background>\nif <exit right>:\n<set background to woods_background>\nif <exit right>:\n<set background to woods_background>\nand so on and on and on...\nelse:\n<set background to exit_background>\nelse:\n<set background to exit_background>\nelse:\n<set background to exit_background>\n<set background to woods_background>\nif <exit right>:\nelse:\n<set background to exit_background>\n<set background to woods_background>\nif <exit right>:\nelse:\n<set background to exit_background>\n<set background to woods_background>\nand so on and on and on...\n<set background to exit_background>\n6.0001 LECTURE 2\n14\nImage Courtesy Nintendo, All Rights Reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nwhile <exit right>:\n<set background to woods_background>\n<set background to exit_background>\nLegend of Zelda –\nLost Woods\nkeep going right, \ntakes you back to this \nsame screen, stuck in \na loop\n6.0001 LECTURE 2\n15\n<set background to woods_background>\nWord Cloud copyright unknown, All Right Reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nCONTROL FLOW: \nwhileLOOPS\nwhile <condition>:\n<expression>\n<expression>\n...\n<condition> evaluates to a Boolean\nif <condition> is True, do all the steps inside the \nwhile code block\ncheck <condition> again\nrepeat until <condition> is False\n6.0001 LECTURE 2\n16\n\nwhileLOOP EXAMPLE\nYou are in the Lost Forest.\n************\n************\n\n************\n************\nGo left or right?\nPROGRAM:\nn = input(\"You're in the Lost Forest. Go left or right? \")\nwhile n == \"right\":\nn = input(\"You're in the Lost Forest. Go left or right? \")\nprint(\"You got out of the Lost Forest!\")\n6.0001 LECTURE 2\n17\n\nCONTROL FLOW: \nwhile and forLOOPS\niterate through numbers in a sequence\n# more complicated with while loop\nn = 0\nwhile n < 5:\nprint(n)\nn = n+1\n# shortcut with for loop\nfor n in range(5):\nprint(n)\n6.0001 LECTURE 2\n18\n\nCONTROL FLOW: forLOOPS\nfor <variable> in range(<some_num>):\n<expression>\n<expression> \n...\neach time through the loop, <variable> takes a value\nfirst time, <variable> starts at the smallest value\nnext time, <variable> gets the prevvalue + 1\netc.\n6.0001 LECTURE 2\n19\n\nrange(start,stop,step)\ndefault values are start = 0and step = 1and optional\nloop until value is stop -1 \nmysum= 0\nfor iin range(7, 10):\nmysum+= i\nprint(mysum)\nmysum= 0\nfor iin range(5, 11, 2):\nmysum+= i\nprint(mysum)\n6.0001 LECTURE 2\n20\n\nbreakSTATEMENT\nimmediately exits whatever loop it is in\nskips remaining expressions in code block\nexits only innermost loop!\nwhile <condition_1>:\nwhile <condition_2>:\n<expression_a>\nbreak\n<expression_b>\n<expression_c>\n6.0001 LECTURE 2\n21\n\nbreakSTATEMENT\nmysum = 0\nfor i in range(5, 11, 2):\nmysum += i\nif mysum== 5:\nbreak\nmysum+= 1\nprint(mysum)\nwhat happens in this program? \nmysum+= i\nif mysum== 5:\nbreak\n6.0001 LECTURE 2\n22\n\nforVS whileLOOPS\nforloops\nknownumber of \niterations\ncan end early via \nbreak\nuses a counter\ncanrewritea for loop \nusing a while loop\nwhileloops\nunboundednumber of \niterations\ncan end early via break\ncan use a counter but \nmust initialize before loop \nand increment it inside loop\nmay not be able to \nrewrite a whileloop using \na forloop\n6.0001 LECTURE 2\n23\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture4.pdf.pdf",
    "content": "TUPLES, LISTS, \nALIASING, \nMUTABILITY, CLONING\n(download slides and .pyfiles and follow along!)\n6 . 0 0 0 1   L E C T U R E   5\n6.0001 LECTURE 5\n1\n\nLAST TIME\nfunctions\ndecomposition –create structure\nabstraction –suppress details\nfrom now on will be using functions a lot\n6.0001 LECTURE 5\n2\n\nTODAY\nhave seen variable types: int, float, bool,string\nintroduce new compound data types\n•tuples\n•lists\nidea of aliasing\nidea of mutability\nidea of cloning\n6.0001 LECTURE 5\n3\n\nTUPLES\nan ordered sequence of elements, can mix element types\ncannot change element values, immutable\nrepresented with parentheses\nte= ()\nt = (2,\"mit\",3)\nt[0] evaluates to 2\n(2,\"mit\",3) + (5,6)evaluates to(2,\"mit\",3,5,6)\nt[1:2] slice tuple, evaluates to (\"mit\",)\nt[1:3] slice tuple, evaluates to (\"mit\",3)\nlen(t) evaluates to 3\nt[1] = 4 gives error, can’t modify object\n6.0001 LECTURE 5\n4\n\nTUPLES\nconveniently used to swapvariable values\nx = ytemp= x(x, y) = (y, x)\ny = xx = y\ny = temp\nused to return more than one value from a function\ndefquotient_and_remainder(x, y):\nq = x // y\nr = x % y\nreturn(q, r)\n(quot, rem) = quotient_and_remainder(4,5)\n6.0001 LECTURE 5\n5\n\nMANIPULATING TUPLES\ncan iterateover tuples\ndefget_data(aTuple):\nnums= ()\nwords = ()\nfor t in aTuple:\nnums= nums+ (t[0],)   \nif t[1] not in words:   \nwords = words + (t[1],)\nmin_n= min(nums)\nmax_n= max(nums)\nunique_words= len(words)\nreturn (min_n, max_n, unique_words)\n6.0001 LECTURE 5\n6\naTuple:(( ),( ),( ))\nnums(         )\nwords(        )\nif not already in words \ni.e. unique strings from aTuple\n?\n?\n?\n\nLISTS\norderedsequenceof information, accessible by index\na list is denoted by squarebrackets, []\na list contains elements\n•usually homogeneous (ie, all integers)\n•can contain mixed types (not common)\nlist elements can be changed so a list is mutable\n6.0001 LECTURE 5\n7\n\nINDICES AND ORDERING\na_list= []\nL = [2, 'a', 4, [1,2]]\nlen(L)evaluates to 4\nL[0]evaluates to 2\nL[2]+1evaluates to 5\nL[3] evaluates to [1,2], another list!\nL[4]gives an error \ni= 2\nL[i-1]evaluates to ‘a’ since L[1]='a' above\n6.0001 LECTURE 5\n8\n\nCHANGING ELEMENTS\nlists are mutable!\nassigning to an element at an index changes the value\nL = [2, 1, 3]\nL[1] = 5\nLis now [2, 5, 3], note this is the same object L\n6.0001 LECTURE 5\n9\nL\n[2,1,3][2,5,3]\n\nITERATING OVER A LIST\ncompute the sum of elements of a list\ncommon pattern, iterate over list elements\nnotice\n•list elements are indexed 0 to len(L)-1\n•range(n)goes from 0 to n-1\n6.0001 LECTURE 5\n10\ntotal = 0 \nfor iin range(len(L)): \ntotal += L[i] \nprint total\ntotal = 0 \nfor iin L: \ntotal += i\nprint total\n\nOPERATIONS ON LISTS -ADD\naddelements to end of list with L.append(element)\nmutatesthe list!\nL = [2,1,3]\nL.append(5)L is now [2,1,3,5]\nwhat is the dot? \n•lists are Python objects, everything in Python is an object\n•objects have data\n•objects have methods and functions \n•access this information by object_name.do_something()\n•will learn more about these later\n6.0001 LECTURE 5\n11\n\nOPERATIONS ON LISTS -ADD\nto combine lists together use concatenation, + operator, \nto give you a new list\nmutatelist with L.extend(some_list)\nL1 = [2,1,3]\nL2 = [4,5,6]\nL3 = L1 + L2L3is [2,1,3,4,5,6]\nL1, L2 unchanged\nL1.extend([0,6])mutated L1to [2,1,3,0,6] \n6.0001 LECTURE 5\n12\n\nOPERATIONS ON LISTS -\nREMOVE\ndelete element at a specific index withdel(L[index])\nremove element at end of list with L.pop(), returns the \nremoved element\nremove a specific element with L.remove(element)\n•looks for the element and removes it\n•if element occurs multiple times, removes first occurrence\n•if element not in list, gives an error\nL = [2,1,3,6,3,7,0] # do below in order\nL.remove(2)mutates L = [1,3,6,3,7,0]\nL.remove(3)mutates L = [1,6,3,7,0] \ndel(L[1]) mutates L = [1,3,7,0]\nL.pop()returns 0 and mutates L = [1,3,7]\n6.0001 LECTURE 5\n13\n\nCONVERT LISTS TO STRINGS \nAND BACK\nconvert string to list with list(s), returns a list with every \ncharacter from san element in L \ncan use s.split(), to split a string on a character parameter, \nsplits on spaces if called without a parameter\nuse ''.join(L) to turn a list of characters into a string, can \ngive a character in quotes to add char between every element\n6.0001 LECTURE 5\n14\ns = \"I<3 cs\"sis a string\nlist(s) returns ['I','<','3',' ','c','s']\ns.split('<') returns ['I', '3 cs']\nL = ['a','b','c']Lis a list\n''.join(L)returns \"abc\"\n'_'.join(L)returns \"a_b_c\"\n\nOTHER LIST OPERATIONS\nsort() and sorted()\nreverse()\nand many more! \nhttps://docs.python.org/3/tutorial/datastructures.html\nL=[9,6,0,3]\nsorted(L)returns sorted list, does not mutateL\nL.sort()mutatesL=[0,3,6,9]\nL.reverse()mutatesL=[9,6,3,0]\n6.0001 LECTURE 5\n15\n\nMUTATION, ALIASING, CLONING\nAgain, Python Tutor is your best friend \nto help sort this out!\nhttp://www.pythontutor.com/\nIMPORTANT \nand\nTRICKY!\n6.0001 LECTURE 5\n16\n\nLISTS IN MEMORY\nlists are mutable\nbehave differently than immutable types\nis an object in memory\nvariable name points to object\nany variable pointing to that object is affected\nkey phrase to keep in mind when working with lists is \nside effects\n6.0001 LECTURE 5\n17\n\nAN ANALOGY\nattributes of a person\n◦singer, rich\nhe is known by many names\nall nicknames point to the same person\n•add new attribute to one nickname ... \n•... all his nicknames refer to old attributes AND all new ones\n6.0001 LECTURE 5\n18\nJustin Biebersingerrichtroublemaker\nThe Biebsingerrichtroublemaker\nJBeebssingerrichtroublemaker\n\nALIASES\nhotis an aliasfor warm–changing one changes the \nother!\nappend()has a side effect\n6.0001 LECTURE 5\n19\n\nCLONING A LIST\ncreate a new list and copy every element using \nchill = cool[:]\n6.0001 LECTURE 5\n20\n\nSORTING LISTS\ncalling sort() mutates the list, returns nothing\ncalling sorted() \ndoes not mutate \nlist, must assign \nresult to a variable\n6.0001 LECTURE 5\n21\n\nLISTS OF LISTS OF LISTS OF....\ncan have nestedlists\nside effects still \npossible after mutation\n6.0001 LECTURE 5\n22\n\nMUTATION AND ITERATION\nTry this in Python Tutor!\navoidmutating a list as you are iterating over it\ndefremove_dups(L1, L2):\nfor e in L1:\nif e in L2:\nL1.remove(e)\nL1 = [1, 2, 3, 4]\nL2 = [1, 2, 5, 6]\nremove_dups(L1, L2)\nL1 is [2,3,4] not [3,4] Why? \n•Python uses an internal counter to keep track of index it is in the loop\n•mutating changes the list length but Python doesn’t update the counter\n•loop never sees element 2\n6.0001 LECTURE 5\n23\ndefremove_dups(L1, L2):\nL1_copy = L1[:]\nfor e in L1_copy:\nif e in L2:\nL1.remove(e)\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture1.pdf.pdf",
    "content": "WELCOME!\n(download slides and .pyfiles and follow along!)\n6 . 0 0 0 1   L E C T U R E   1\n1\n6.0001 LECTURE 1\n\nTODAY\ncourse info\nwhat is computation\npython basics\nmathematical operations\npython variables and types\nNOTE: slides and code files up before each lecture\nohighly encourage you to download them before lecture\notake notes and run code files when I do\nobring computers to answer in-class practice exercises!\n2\n6.0001 LECTURE 1\n\nCOURSE INFO\nGrading\n◦approx. 20%  Quiz\n◦approx. 40%  Final \n◦approx. 30%  Problem Sets \n◦approx. 10%  MITx Finger Exercises\n3\n6.0001 LECTURE 1\n\nCOURSE POLICIES\nCollaboration\n◦may collaborate with anyone\n◦required to write code independently and write names of \nall collaborators on submission\n◦we will be running a code similarity program on all psets\nExtensions\n◦no extensions\n◦late days, see course website for details\n◦drop and roll weight of max two psetsin final exam grade\n◦should be EMERGENCY use only\n4\n6.0001 LECTURE 1\n\nRECITATIONS\nnot mandatory\ntwo flavors\n1) Lecture review:reviewlecture material \noif you missed lecture \noif you need a different take on the same concepts\n2) Problem solving: teach you how to solve programming \nproblems\nouseful if you don’t know how to set up pseudocode from psetwords \nowe show a couple of harder questions\nowalk you through how to approach solving the problem\nobrainstorm code solution along with the recitation instructor\nowill post solutions after\n6.0001 LECTURE 1\n5\n\nFAST PACED COURSE\nPosition yourself to succeed!\n◦read psetswhen they come out and come back to them later\n◦use late days in emergency situations\nNew to programming? PRACTICE. PRACTICE? PRACTICE! \n◦can’t passively absorb programming as a skill\n◦download code before lecture and follow along\n◦do MITx finger exercises \n◦don’t be afraid to try out Python commands! \n6\n6.0001 LECTURE 1\n\nPRACTICE\n7\n6.0001 LECTURE 1\nPROBLEM \nSOLVING\nPROGRAMMING \nSKILL\nKNOWLEDGE \nOF CONCEPTS\n\nTOPICS\nrepresent knowledge with datastructures\niteration and recursionas computational metaphors\nabstractionof procedures and data types\norganize and modularizesystems using object classes \nand methods\ndifferent classes of algorithms, searching and sorting\ncomplexityof algorithms\n6.0001 LECTURE 1\n8\n\nWHAT DOES A COMPUTER DO\nFundamentally:\n◦performs calculations\na billion calculations per second!\n◦remembersresults\n100s of gigabytes of storage!\nWhat kinds of calculations?\n◦built-into the language\n◦ones that you defineas the programmer\ncomputers only know what you tell them\n6.0001 LECTURE 1\n9\n\nTYPES OF KNOWLEDGE\ndeclarative knowledge is statements of fact. \n◦someone will win a Google \nCardboard before class ends\nimperative knowledge is a recipeor “how-to”.  \n1)Students sign up for raffle\n2)Ana opens her IDE\n3)Ana chooses a random number between 1\nst\nand n\nth\nresponder\n4)Ana finds the number in the responders sheet. Winner!\n6.0001 LECTURE 1\n10\n\nA NUMERICAL EXAMPLE\nsquare root of a number x is y such that y*y = x\nrecipe for deducing square root of a number x (16)\n1)Start with a guess, g\n2)If g*gis close enough to x, stop and say g is the \nanswer \n3)Otherwise make a new guess by averaging g and x/g\n4)Using the new guess, repeatprocess until close enough\n6.0001 LECTURE 1\n11\ngg*gx/g(g+x/g)/2\n3916/34.17\n4.1717.363.8374.0035\n4.003516.02773.9974.000002\n\nWHAT IS A RECIPE\n1)sequence of simple steps\n2)flow of controlprocess that specifies when each \nstep is executed\n3)a means of determining when to stop\n1+2+3 = an algorithm!\n6.0001 LECTURE 1\n12\n\nCOMPUTERS ARE MACHINES\nhow to capture a recipe in a mechanical process\nfixed program computer\n◦calculator\nstored program computer\n◦machine stores and executes instructions\n6.0001 LECTURE 1\n13\n\nBASIC MACHINE ARCHITECTURE\n6.0001 LECTURE 1\n14\nMEMORY\nCONTROL \nUNIT\nARITHMETIC \nLOGIC UNIT\nINPUTOUTPUT\nprogram counterdo primitive ops\n\nSTORED PROGRAM COMPUTER\nsequence of instructions stored inside computer\n◦built from predefined set of primitive instructions\n1)arithmetic and logic\n2)simple tests\n3)moving data\nspecial program (interpreter) executes each \ninstruction in order\n◦use tests to change flow of control through sequence\n◦stop when done\n6.0001 LECTURE 1\n15\n\nBASIC PRIMITIVES\nTuring showed that you can compute anything using 6 \nprimitives\nmodern programming languages have more \nconvenient set of primitives\ncan abstract methods to createnew primitives\nanything computable in one language is computable in \nany other programming language\n6.0001 LECTURE 1\n16\n\nCREATING RECIPES\na programming language provides a set of primitive \noperations\nexpressionsare complex but legal combinations of \nprimitives in a programming language\nexpressions and computations have valuesand \nmeanings in a programming language\n6.0001 LECTURE 1\n17\n\nASPECTS OF LANGUAGES\nprimitive constructs\n◦English: words\n◦programming language: numbers, strings, simple \noperators\n6.0001 LECTURE 1\n18\nWord Cloud copyright Michael Twardos, All Right Reserved. This content is excluded from our\nCreative Commons license. For more information, see https://ocw.mit.edu/help/faq-fair-use/.\nWord Cloud copyright unknown, All Right Reserved.\nThis content is excluded from our Creative\nCommons\n license. For more information, see\nhttps://ocw.mit.edu/help/faq-fair-use/.\n\nASPECTS OF LANGUAGES\nsyntax\n◦English: \"cat dog boy\"    not syntactically valid\n\"cat hugs boy\"syntactically valid\n◦programming language: \"hi\"5not syntactically valid\n3.2*5syntactically valid\n6.0001 LECTURE 1\n19\n\nASPECTS OF LANGUAGES\nstatic semanticsis which syntactically valid strings \nhave meaning\n◦English: \"I are hungry\"syntactically valid\nbut static semantic error\n◦programming language: 3.2*5syntactically valid\n3+\"hi\"static semantic error\n6.0001 LECTURE 1\n20\n\nASPECTS OF LANGUAGES\nsemanticsis the meaning associated with a \nsyntactically correct string of symbols with no static \nsemantic errors\n◦English: can have many meanings \"Flying planes \ncan be dangerous\"\n◦programming languages: have only one meaning but may \nnot be what programmer intended\n6.0001 LECTURE 1\n21\n\nWHERE THINGS GO WRONG\nsyntactic errors\n◦common and easily caught\nstatic semantic errors\n◦some languages check for these before running program\n◦can cause unpredictable behavior\nno semantic errors but differentmeaning than what \nprogrammer intended\n◦program crashes, stops running\n◦program runs forever\n◦program gives an answer but different than expected\n6.0001 LECTURE 1\n22\n\nPYTHON PROGRAMS\na programis a sequence of definitions and commands\n◦definitions evaluated \n◦commands executedby Python interpreter in a shell\ncommands(statements) instruct interpreter to do \nsomething\ncan be typed directly in a shellor stored in a filethat \nis read into the shell and evaluated\n◦Problem Set 0 will introduce you to these in Anaconda\n6.0001 LECTURE 1\n23\n\nOBJECTS\nprograms manipulate data objects\nobjects have a typethat defines the kinds of things \nprograms can do to them\n◦Ana is a human so she can walk, speak English, etc.\n◦Chewbacca is a wookieso he canwalk, “mwaaarhrhh”, etc.\nobjects are\n◦scalar (cannot be subdivided)\n◦non-scalar (have internal structure that can be accessed)\n6.0001 LECTURE 1\n24\n\nSCALAR OBJECTS\nint–represent integers, ex. 5\nfloat –represent real numbers, ex. 3.27\nbool –represent Booleanvalues Trueand False\nNoneType–specialand has one value, None\ncan use type() to see the type of an object\n>>> type(5)\nint\n>>> type(3.0)\nfloat\n6.0001 LECTURE 1\n25\n\nTYPE CONVERSIONS (CAST)\ncan convert object of one type to another\nfloat(3)converts integer 3 to float 3.0\nint(3.9)truncates float 3.9to integer 3\n6.0001 LECTURE 1\n26\n\nPRINTING TO CONSOLE\nto show output from code to a user, use print\ncommand\nIn [11]: 3+2\nOut[11]: 5\nIn [12]: print(3+2)\n5\n6.0001 LECTURE 1\n27\n\nEXPRESSIONS\ncombine objects and operators to form expressions\nan expression has a value, which has a type\nsyntax for a simple expression\n<object> <operator> <object>\n6.0001 LECTURE 1\n28\n\nOPERATORS ON intsand floats\ni+jthe sum\ni-jthe difference\ni*jthe product\ni/jdivision\ni%jthe remainderwhen iis divided by j\ni**jito the powerof j\n6.0001 LECTURE 1\n29\nif both are ints, result is int\nif either or both are floats, result is float\nresult is float\n\nSIMPLE OPERATIONS\nparentheses used to tell Python to do these \noperations first\noperator precedence without parentheses\n◦**\n◦*\n◦/\n◦+ and –executed left to right, as appear in expression\n6.0001 LECTURE 1\n30\n\nBINDING VARIABLES AND \nVALUES\nequal sign is an assignmentof a value to a variable \nname\npi = 3.14159\npi_approx= 22/7\nvalue stored in computer memory\nan assignment binds name to value\nretrieve value associated with name or variable by \ninvoking the name, by typing pi\n6.0001 LECTURE 1\n31\n\nABSTRACTING EXPRESSIONS\nwhy give names to values of expressions?\nto reuse names instead of values\neasier to change code later\npi = 3.14159\nradius = 2.2\narea = pi*(radius**2)\n6.0001 LECTURE 1\n32\n\nPROGRAMMING vs MATH\nin programming, you do not “solve for x”\npi = 3.14159\nradius = 2.2\n# area of circle\narea = pi*(radius**2)\nradius = radius+1\n6.0001 LECTURE 1\n33\n\nCHANGING BINDINGS\ncan re-bindvariable names using new assignment \nstatements\nprevious value may still stored in memory but lost the \nhandle for it\nvalue for area does not change until you tell the \ncomputer to do the calculation again\n6.0001 LECTURE 1\n34\npi\nradius\narea\n3.14\n2.2\n15.1976\n3.2\npi = 3.14\nradius = 2.2\narea = pi*(radius**2)\nradius = radius+1\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture7.pdf.pdf",
    "content": "DECOMPOSITION, \nABSTRACTION, \nFUNCTIONS\n(download slides and .pyfiles ĂŶĚ\u0003follow along!)\n6 . 0 0 0 1   L E C T U R E   4\n6.0001 LECTURE 4\n1\n\nLAST TIME\nwhile loops vs for loops\nshould know how to write both kinds\nshould know when to use them\nguess-and-check and approximation methods\nbisection method to speed up programs\n6.0001 LECTURE 4\n2\n\nTODAY\nstructuring programs and hiding details\nfunctions\nspecifications\nkeywords: returnvs print\nscope\n6.0001 LECTURE 4\n3\n\nHOW DO WE WRITE CODE?\nso far...\n•covered language mechanisms\n•know how to write different files for each computation\n•each file is some piece of code\n•each code is a sequence of instructions\nproblems with this approach\n•easy for small-scale problems\n•messy for larger problems\n•hard to keep track of details\n•how do you know the right info is supplied to the right \npart of code\n6.0001 LECTURE 4\n4\n\nGOOD PROGRAMMING\nmore code not necessarily a good thing\nmeasure good programmers by the amount of \nfunctionality\nintroduce functions\nmechanism to achieve decompositionand abstraction\n6.0001 LECTURE 4\n5\n\nEXAMPLE –PROJECTOR\na projector is a black box\ndon’t know how it works\nknow the interface: input/output\nconnect any electronic to it that can communicate \nwith that input\nblack box somehow converts image from input source \nto a wall, magnifying it\nABSTRACTION IDEA: do not need to know how \nprojector works to use it\n6.0001 LECTURE 4\n6\n\nEXAMPLE–PROJECTOR\nprojecting large image for Olympics decomposed into \nseparate tasks for separate projectors\neach projector takes input and produces separate \noutput\nall projectors work together to produce larger image\nDECOMPOSITION IDEA: different devices work \ntogether to achieve an end goal\n6.0001 LECTURE 4\n7\n\nAPPLY THESE CONCEPTS\n6.0001 LECTURE 4\n8\nTO PROGRAMMING!\n\nCREATE STRUCTURE with \nDECOMPOSITION\n6.0001 LECTURE 4\n9\nin projector example, separate devices\nin programming, divide code into modules \n•are self-contained\n•used to break upcode\n•intended to be reusable\n•keep code organized\n•keep code coherent\nthis lecture, achieve decomposition with functions\nin a few weeks, achieve decomposition with classes\n\nSUPRESS DETAILS with \nABSTRACTION\n6.0001 LECTURE 4\n10\nin projector example, instructions for how to use it are \nsufficient, no need to know how to build one\nin programming, think of a piece of code as a black box\n•cannot see details\n•do not need to see details\n•do not want to see details\n•hide tedious coding details\nachieve abstraction with function specificationsor \ndocstrings\n\nFUNCTIONS\nwrite reusable pieces/chunks of code, called functions\nfunctions are not run in a program until they are \n“called” or “invoked” in a program\nfunction characteristics:\n•has a name\n•has parameters(0 or more)\n•has a docstring(optional but recommended)\n•has a body\n•returnssomething\n6.0001 LECTURE 4\n11\n\ndefis_even( i):\n\"\"\"\nInput: i, a positive int\nReturns True if iis even, otherwise False\n\"\"\"\nprint(\"inside is_even\")\nreturn i%2 == 0\nis_even(3)\nHOW TO WRITE and \nCALL/INVOKE A FUNCTION\n6.0001 LECTURE 4\n12\n\ndefis_even( i):\n\"\"\" \nInput: i, a positive int\nReturns True if iis even, otherwise False\n\"\"\"\nprint(\"inside is_even\")\nreturn i%2 == 0\nIN THE FUNCTION BODY\n6.0001 LECTURE 4\n13\n\ndeff( x ):\nx = x + 1\nprint('in f(x): x =', x)\nreturn x\nx = 3\nz = f( x )\nformal parameter gets bound to the value of \nactual parameter when function is called \nnew scope/frame/environmentcreated when enter a function\nscopeis mapping of names to objects\nVARIABLE SCOPE\n6.0001 LECTURE 4\n14\n\ndeff( x ):\nx = x + 1\nprint('in f(x): x =', x)\nreturn x\nx = 3\nz = f( x )\nVARIABLE SCOPE\n6.0001 LECTURE 4\n15\nGlobal scope\nf\nx\nz\nSome \ncode\nf scope\nx\n3\n3\n\nVARIABLE SCOPE\n6.0001 LECTURE 4\n16\nGlobal scope\nf\nx\nz\nSome \ncode\nf scope\nx\n4\n3\ndeff( x ):\nx = x + 1\nprint('in f(x): x =', x)\nreturn x\nx = 3\nz = f( x )\n\nVARIABLE SCOPE\n6.0001 LECTURE 4\n17\nGlobal scope\nf\nx\nz\nSome \ncode\n3\nf scope\nx\n4\ndeff( x ):\nx = x + 1\nprint('in f(x): x =', x)\nreturn x\nx = 3\nz = f( x )\nreturns 4\n\nVARIABLE SCOPE\n6.0001 LECTURE 4\n18\nGlobal scope\nf\nx\nz\nSome \ncode\n3\n4\ndeff( x ):\nx = x + 1\nprint('in f(x): x =', x)\nreturn x\nx = 3\nz = f( x )\n\nONE WARNING IF NO \nreturnSTATEMENT\ndefis_even( i):\n\"\"\" \nInput: i, a positive int\nDoes not return anything\n\"\"\"\ni%2 == 0\nPython returns the value None, if no returngiven\nrepresents the absence of a value\n6.0001 LECTURE 4\n19\n\nreturnvs.        print\nreturn only has meaning \ninsidea function\nonly onereturn executed \ninside a function\ncode inside function but \nafter return statement not \nexecuted\nhas a value associated \nwith it, given to function \ncaller\nprint can be used outside\nfunctions\ncan execute manyprint \nstatements inside a function\ncode inside function can be \nexecuted after a print \nstatement\nhas a value associated with \nit, outputtedto the console\n6.0001 LECTURE 4\n20\n\nFUNCTIONS AS ARGUMENTS\narguments can take on any type, even functions\n6.0001 LECTURE 4\n21\ndeffunc_a():\nprint 'inside func_a'\ndeffunc_b(y):\nprint 'inside func_b'\nreturn y\ndeffunc_c(z):\nprint 'inside func_c'\nreturn z()\nprint func_a()\nprint 5 + func_b(2)\nprint func_c(func_a)\n\nFUNCTIONS AS ARGUMENTS\n6.0001 LECTURE 4\n22\ndeffunc_a():\nprint 'inside func_a'\ndeffunc_b(y):\nprint 'inside func_b'\nreturn y\ndeffunc_c(z):\nprint 'inside func_c'\nreturn z()\nprint func_a()\nprint 5 + func_b(2)\nprint func_c(func_a)\nGlobal scope\nfunc_a\nfunc_b\nfunc_c\nSome \ncode\nSome \ncode\nSome \ncode\nfunc_ascope\nreturns None\nNone\n\nGlobal scope\nfunc_a\nfunc_b\nfunc_c\nFUNCTIONS AS ARGUMENTS\n6.0001 LECTURE 4\n23\ndeffunc_a():\nprint 'inside func_a'\ndeffunc_b(y):\nprint 'inside func_b'\nreturn y\ndeffunc_c(z):\nprint 'inside func_c'\nreturn z()\nprint func_a()\nprint 5 + func_b(2)\nprint func_c(func_a)\nSome \ncode\nSome \ncode\nSome \ncode\nfunc_bscope\ny \n2\nreturns 2\nNone\n7\n\nGlobal scope\nfunc_a\nfunc_b\nfunc_c\nFUNCTIONS AS ARGUMENTS\n24\ndeffunc_a():\nprint 'inside func_a'\ndeffunc_b(y):\nprint 'inside func_b'\nreturn y\ndeffunc_c(z):\nprint 'inside func_c'\nreturn z()\nprint func_a()\nprint 5 + func_b(2)\nprint func_c(func_a)\nSome \ncode\nSome \ncode\nSome \ncode\nfunc_cscope\nz\nfunc_a\nfunc_ascope\nreturns None\nreturns None\nNone\n7\n6.0001 LECTURE 4\nNone\n\ninside a function, can access a variable defined outside\ninside a function, cannot modify a variable defined \noutside --can using global variables, but frowned upon\nSCOPE EXAMPLE\n6.0001 LECTURE 4\n25\ndefg(y):\nprint(x)\nprint(x + 1)\nx = 5\ng(x)\nprint(x)\ndefh(y):\nx += 1\nx = 5\nh(x)\nprint(x)\ndeff(y):\nx = 1\nx += 1\nprint(x)\nx = 5\nf(x)\nprint(x)\n\ninside a function, can access a variable defined outside\ninside a function, cannot modify a variable defined \noutside --can using global variables, but frowned upon\nSCOPE EXAMPLE\n6.0001 LECTURE 4\n26\ndefg(y):\nprint(x)\nx = 5\ng(x)\nprint(x)\ndefh(y):\nx += 1\nx = 5\nh(x)\nprint(x)\ndeff(y):\nx = 1\nx += 1\nprint(x)\nx = 5\nf(x)\nprint(x)\n\nHARDER SCOPE EXAMPLE\nPython Tutor is your best friend to \nhelp sort this out!\nhttp://www.pythontutor.com/\nIMPORTANT \nand\nTRICKY!\n6.0001 LECTURE 4\n27\n\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\nSCOPE DETAILS\nGlobal scope\ng\nx\nz\nSome \ncode\n3\n6.0001 LECTURE 4\n28\n\nSCOPE DETAILS\ngscope\nx \nh\nSome \ncode\n3\n6.0001 LECTURE 4\n29\nGlobal scope\ng\nx\nz\nSome \ncode\n3\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\n\nSCOPE DETAILS\ngscope\nx \nh\nSome \ncode\n34\n6.0001 LECTURE 4\n30\nGlobal scope\ng\nx\nz\nSome \ncode\n3\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\n\nSCOPE DETAILS\nGlobal scope\ng\nx\nz\nSome \ncode\n3\ngscope\nx \nh\nSome \ncode\n3\nhscope\nx\n“abc”4\n6.0001 LECTURE 4\n31\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\nreturns None\n\nSCOPE DETAILS\ng scope\nx \nh\nSome \ncode\nNone\n4\n6.0001 LECTURE 4\n32\nGlobal scope\ng\nx\nz\nSome \ncode\n3\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\nreturns 4\n\nSCOPE DETAILS\n6.0001 LECTURE 4\n33\nGlobal scope\ng\nx\nz\nSome \ncode\n3\n4\ndefg(x):\ndefh():\nx = 'abc'\nx = x + 1\nprint('g: x =', x)\nh()\nreturn x\nx = 3\nz = g(x)\n\nDECOMPOSITION & \nABSTRACTION\npowerful together\ncode can be used many times but only has to be \ndebugged once!\n6.0001 LECTURE 4\n34\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture5.pdf.pdf",
    "content": "RECURSION, \nDICTIONARIES \n(download slides and .py files and follow along!)\r\n6.0001 LECTURE 6\r\n6.0001\tLECTURE\t6\t\n1\t\n\nQUIZ PREP\r\n§a\tpaper\tand\tan\tonline\tcomponent\n§open\tbook/notes\n§not\topen\tInternet,\tnot\topen\tcomputer\n§\tstart\tprinSng\tout\twhatever\tyou\tmay\twant\tto\tbring\t\n6.0001\tLECTURE\t6\t\n2\t\n\nLAST TIME\r\n§\ttuples\t-\timmutable\t\n§\tlists\t-\tmutable\t\n§\taliasing,\tcloning\t\t\n§\tmutability\tside\teffects\t\n6.0001\tLECTURE\t6\t\n3\t\n\nTODAY\r\n§recursion\t–\tdivide/decrease\tand\tconquer\n§\tdicSonaries\t–\tanother\tmutable\tobject\ttype\t\n6.0001\tLECTURE\t6\t\n4\t\n\nRECURSION\r\nRecursion\tis\tthe\tprocess\tof\trepeaSng\titems\tin\ta\tself-s\nimilar\tway.\t\t\n6.0001\tLECTURE\t6\t\n5\t\n\nWHAT IS RECURSION?\r\n§\tAlgorithmically:\ta\tway\tto\tdesign\tsoluSons\tto\tproblems\t\nby\tdivide-and-conquer\tor\tdecrease-and-conquer\n◦ reduce\ta\tproblem\tto\tsimpler\tversions\tof\tthe\tsame\t\nproblem\t\t\n§\tSemanScally:\ta\tprogramming\ttechnique\twhere\ta\t\nfunc0on\tcalls\titself\t\n◦ \tin\tprogramming,\tgoal\tis\tto\tNOT\thave\tinfinite\trecursion\t\n◦ \tmust\thave\t1\tor\tmore\tbase\tcases\tthat\tare\teasy\tto\tsolve\t\n◦ \tmust\tsolve\tthe\tsame\tproblem\ton\tsome\tother\tinput\twith\tthe\tgoal\t\nof\tsimplifying\tthe\tlarger\tproblem\tinput\t\n6.0001\tLECTURE\t6\t\n6\t\n\nITERATIVE ALGORITHMS SO FAR\r\n§\tlooping\tconstructs\t(while\tand\tfor\tloops)\tlead\tto\t\nitera0ve\talgorithms\t\n§\tcan\tcapture\tcomputaSon\tin\ta\tset\tof\tstate\tvariables\t\nthat\tupdate\ton\teach\titeraSon\tthrough\tloop\t\n6.0001\tLECTURE\t6\t\n7\t\n\nMULTIPLICATION –  \nITERATIVE SOLUTION\r\n§\t“mulSply\ta\t*\tb”\tis\tequivalent\tto\t“add\ta\tto\titself\tb\tSmes”\t\na + a + a + a + ... + a \n§\tcapture\tstate\tby\t\t\n◦ \tan\titera0on\tnumber\t(i)\tstarts\tat\tb\t\n     i ß i-1\tand\tstop\twhen\t0\t\n \n   0a    1a\t     2a       3a      4a\nlt)\t◦ \ta\tcurrent\tvalue\tof\tcomputa0on\t(resu\n\t\n\t\n     result ß result + a \ndef mult_iter(a, b):\n    result = 0\n while b > 0:\n += aresult\nb -= 1\n    return result\n\t\n6.0001\tLECTURE\t6\t\n8\t\n\t\n\t\n\t\n\na*b = a + a + a + a + ... + a \n = a + a + a + a + ... + a \n = a + a * (b-1) \nMULTIPLICATION –  \nRECURSIVE SOLUTION\r\n§\trecursive\tstep\t\n•\tthink\thow\tto\treduce\t\nproblem\tto\ta\tsimpler/\nsmaller\tversion\tof\t\nsame\tproblem\t\t\n§\tbase\tcase\t\n•\tkeep\treducing\t\nproblem\tunSl\treach\ta\t\nsimple\tcase\tthat\tcan\t\nbe\tsolved\tdirectly\t\n•\twhen\tb\t=\t1,\ta*b\t=\ta\t\n\t\n6.0001\tLECTURE\t6\t\n9\t\ndef mult(a, b):\n   if b == 1:\nreturn a\n    else:\nreturn a + mult(a, b-1)\n\nFACTORIAL\r\nn! = n*(n-1)*(n-2)*(n-3)* ... * 1 \n§\tfor\twhat\tn\tdo\twe\tknow\tthe\tfactorial?\t\nn\t=\t1      à if n == 1: \n    return 1  \n§\thow\tto\treduce\tproblem?\tRewrite\tin\tterms\tof\t\nsomething\tsimpler\tto\treach\tbase\tcase\t\nn*(n-1)!    \tà\telse:  \n    return n*factorial(n-1) \n\t\n6.0001\tLECTURE\t6\t\n10\t\n\nRECURSIVE  \nFUNCTION  \nSCOPE  \nEXAMPLE\r\n6.0001\tLECTURE\t6\t\n11\t\nGlobal\tscope\t\nfact\t\nSome\t\ncode\t\nfact\tscope\t\n(call\tw/\tn=4)\t\nn\t\n4\t\nfact\tscope\t\n(call\tw/\tn=3)\t\nn\t\n3\t\nfact\tscope\t\n(call\tw/\tn=2)\t\nn\t\n2\t\nfact\tscope\t\n(call\tw/\tn=1)\t\nn\t\n1\t\ndef fact(n):\n    if n == 1:\nreturn 1\n    else:\nreturn n*fact(n-1)\nprint(fact(4))\n\nSOME OBSERVATIONS\r\n§\teach\trecursive\tcall\tto\ta\tfuncSon\tcreates\tits\t\nown\tscope/environment\t\n§\tbindings\tof\tvariables\tin\ta\tscope\tare\tnot\t\nchanged\tby\trecursive\tcall\t\n§\tflow\tof\tcontrol\tpasses\tback\tto\tprevious\t\nscope\tonce\tfuncSon\tcall\treturns\tvalue\t\n6.0001\tLECTURE\t6\t\n12\t\n\nITERATIONvs.     RECURSION \r\r   \r\ndef factorial_iter(n):def factorial(n):\n    prod = 1    if n == 1:\n    for i in range(1,n+1):return 1\nprod *= i    else:\n    return prodreturn n*factorial(n-1)\n6.0001\tLECTURE\t6\t\n13\t\n§\trecursion\tmay\tbe\tsimpler,\tmore\tintuiSve\t\t\n§\trecursion\tmay\tbe\tefficient\tfrom\tprogrammer\tPOV\t\n§\trecursion\tmay\tnot\tbe\tefficient\tfrom\tcomputer\tPOV\t\n\nINDUCTIVE REASONING\r\n§\tHow\tdo\twe\tknow\tthat\tour\t\ndef mult_iter(a, b):\nrecursive\tcode\twill\twork?\t\n    result = 0\n§\tmult_iter\tterminates\t\n    while b > 0:\nbecause\tb\tis\tiniSally\tposiSve,\t\nresult += a\nand\tdecreases\tby\t1\teach\tSme\t\naround\tloop;\tthus\tmust\t\nb -= 1\neventually\tbecome\tless\tthan\t1\t\n    return result\n§\tmult\tcalled\twith\tb\t=\t1\thas\tno\t\nrecursive\tcall\tand\tstops\t\ndef mult(a, b):\n§\tmult\t\tcalled\twith\tb\t>\t1\tmakes\t\n    if b == 1:\na\trecursive\tcall\twith\ta\tsmaller\t\nreturn a\nversion\tof\tb;\tmust\teventually\t\nreach\tcall\twith\tb\t=\t1\t\n    else:\nreturn a + mult(a, b-1)\n\t\n6.0001\tLECTURE\t6\t\n14\t\n\nMATHEMATICAL INDUCTION\r\n§\tTo\tprove\ta\tstatement\tindexed\ton\tintegers\tis\ttrue\tfor\tall\t\nvalues\tof\tn:\t\n◦ Prove\tit\tis\ttrue\twhen\tn\tis\tsmallest\tvalue\t(e.g.\tn\t=\t0\tor\tn\t=\t1)\t\n◦ Then\tprove\tthat\tif\tit\tis\ttrue\tfor\tan\tarbitrary\tvalue\tof\tn,\tone\t\ncan\tshow\tthat\tit\tmust\tbe\ttrue\tfor\tn+1\t\n6.0001\tLECTURE\t6\t\n15\n\nEXAMPLE OF INDUCTION\r\n§\t0\t+\t1\t+\t2\t+\t3\t+\t...\t+\tn\t=\t(n(n+1))/2\t\n§\tProof:\t\n◦ If\tn\t=\t0,\tthen\tLHS\tis\t0\tand\tRHS\tis\t0*1/2\t=\t0,\tso\ttrue\t\n◦ Assume\ttrue\tfor\tsome\tk,\tthen\tneed\tto\tshow\tthat\t\n\t\t\t\t\t\t\t\t\t\t0\t+\t1\t+\t2\t+\t...\t+\tk\t+\t(k+1)\t=\t((k+1)(k+2))/2\t\n◦ LHS\tis\tk(k+1)/2\t+\t(k+1)\tby\tassumpSon\tthat\tproperty\tholds\tfor\t\nproblem\tof\tsize\tk\t\n◦ This\tbecomes,\tby\talgebra,\t((k+1)(k+2))/2\t\n◦ Hence\texpression\tholds\tfor\tall\tn\t>=\t0\t\n6.0001\tLECTURE\t6\t\n16\t\n\nRELEVANCE TO CODE?\r\n§\tSame\tlogic\tapplies\t\ndef mult(a, b):\n    if b == 1:\nreturn a\n    else:\nreturn a + mult(a, b-1)\n§\tBase\tcase,\twe\tcan\tshow\tthat\tmult must\treturn\tcorrect\tanswer\t\n§\tFor\trecursive\tcase,\twe\tcan\tassume\tthat\tmult correctly\treturns\tan\t\nanswer\tfor\tproblems\tof\tsize\tsmaller\tthan\tb,\tthen\tby\tthe\taddiSon\tstep,\tit\t\nmust\talso\treturn\ta\tcorrect\tanswer\tfor\tproblem\tof\tsize\tb\t\n§\tThus\tby\tinducSon,\tcode\tcorrectly\treturns\tanswer\t\n\t\n6.0001\tLECTURE\t6\t\n17\t\n\nTOWERS OF HANOI\r\n§The\tstory:\n◦ 3\ttall\tspikes\n◦ Stack\tof\t64\tdifferent\tsized\tdiscs\t–\tstart\ton\tone\tspike\n◦ Need\tto\tmove\tstack\tto\tsecond\tspike\t(at\twhich\tpoint\nuniverse\tends)\n◦ Can\tonly\tmove\tone\tdisc\tat\ta\tSme,\tand\ta\tlarger\tdisc\tcan\nnever\tcover\tup\ta\tsmall\tdisc\n6.0001\tLECTURE\t6\t\n18\t\n\nTOWERS OF HANOI\r\n§\tHaving\tseen\ta\tset\tof\texamples\tof\tdifferent\tsized\t\nstacks,\thow\twould\tyou\twrite\ta\tprogram\tto\tprint\tout\tthe\t\nright\tset\tof\tmoves?\t\n§\tThink\trecursively!\t\n◦ Solve\ta\tsmaller\tproblem\t\n◦ Solve\ta\tbasic\tproblem\t\n◦ Solve\ta\tsmaller\tproblem\t\n6.0001\tLECTURE\t6\t\n19\n\n6.0001\tLECTURE\t6\t\n20\t\ndef printMove(fr, to):\n    print('move from ' + str(fr) + ' to ' + str(to))\ndef Towers(n, fr, to, spare):\n    if n == 1:\nprintMove(fr, to)\n    else:\nTowers(n-1, fr, spare, to)\nTowers(1, fr, to, spare)\nTowers(n-1, spare, to, fr)\n\nRECURSION WITH MULTIPLE \nBASE CASES\r\n§\tFibonacci\tnumbers\t\n◦ Leonardo\tof\tPisa\t(aka\tFibonacci)\tmodeled\tthe\tfollowing\t\nchallenge\t\n◦ Newborn\tpair\tof\trabbits\t(one\tfemale,\tone\tmale)\tare\tput\tin\ta\tpen\t\n◦ Rabbits\tmate\tat\tage\tof\tone\tmonth\t\n◦ Rabbits\thave\ta\tone\tmonth\tgestaSon\tperiod\t\n◦ Assume\trabbits\tnever\tdie,\tthat\tfemale\talways\tproduces\tone\tnew\t\npair\t(one\tmale,\tone\tfemale)\tevery\tmonth\tfrom\tits\tsecond\tmonth\t\non.\t\n◦ How\tmany\tfemale\trabbits\tare\tthere\tat\tthe\tend\tof\tone\tyear?\t\n6.0001\tLECTURE\t6\t\n21\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n22\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n23\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n24\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n25\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n26\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n27\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n28\t\n\n6.0001\tLECTURE\t6\t\n29\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n30\t\n\nDemo\tcourtesy\tof\tProf.\tDenny\tFreeman\tand\tAdam\tHartz\t\n6.0001\tLECTURE\t6\t\n31\t\n\nFIBONACCI\r\n\t Ayer\tone\tmonth\t(call\tit\t0)\t–\t1\tfemale\t\n\t Ayer\tsecond\tmonth\t–\tsSll\t1\tfemale\t(now\t\npregnant)\t\n\t Ayer\tthird\tmonth\t–\ttwo\tfemales,\tone\tpregnant,\t\none\tnot\t\n\t In\tgeneral,\tfemales(n)\t=\tfemales(n-1)\t+\t\nfemales(n-2)\t\n◦ Every\tfemale\talive\tat\tmonth\tn-2\twill\tproduce\tone\t\nfemale\tin\tmonth\tn;\t\n◦ These\tcan\tbe\tadded\tthose\talive\tin\tmonth\tn-1\tto\t\nget\ttotal\talive\tin\tmonth\tn\t\nMonth\t    Females\t\n0\t1\t\n1\t1\t\n2\t2\t\n3\t3\t\n4\t5\t\n5\t8\t\n6\t13\t\n6.0001\tLECTURE\t6\t\n32\t\n\nFIBONACCI\r\n§\tBase\tcases:\t\n◦ Females(0)\t=\t1\t\n◦ Females(1)\t=\t1\t\n§\tRecursive\tcase\t\n◦ Females(n)\t=\tFemales(n-1)\t+\tFemales(n-2)\t\n6.0001\tLECTURE\t6\t\n33\t\n\n6.0001\tLECTURE\t6\t\n34\nFIBONACCI\r\ndef fib(x):\n    \"\"\"assumes x an int >= 0\nreturns Fibonacci of x\"\"”\n   if x == 0 or x == 1:\nreturn 1\n    else:\nreturn fib(x-1) + fib(x-2)\n\nRECURSION ON NON-\nNUMERICS\r\n§how\tto\tcheck\tif\ta\tstring\tof\tcharacters\tis\ta\tpalindrome,\ti.e.,\nreads\tthe\tsame\tforwards\tand\tbackwards\t\n◦ “Able\twas\tI,\tere\tI\tsaw\tElba”\t–\tavributed\tto\tNapoleon\t\n◦ “Are\twe\tnot\tdrawn\tonward,\twe\tfew,\tdrawn\tonward\tto\tnew\tera?”\t–\t\navributed\tto\tAnne\tMichaels\t\n35\nImage courtesy of wikipedia, in the public domain.\nBy Larth_Rasnal (Own work) [GFDL (https://www.gnu.org/licenses/fdl-1.3.en.html) or \nCC BY 3.0 (https://creativecommons.org/licenses/by/3.0)], via Wikimedia Commons.\n6.0001\tLECTURE\t6\t\n\nSOLVING RECURSIVELY?\r\n§\tFirst,\tconvert\tthe\tstring\tto\tjust\tcharacters,\tby\tstripping\t\nout\tpunctuaSon,\tand\tconverSng\tupper\tcase\tto\tlower\t\ncase\t\n§\tThen\t\n◦ Base\tcase:\ta\tstring\tof\tlength\t0\tor\t1\tis\ta\tpalindrome\t\n◦ Recursive\tcase:\t\n◦ If\tfirst\tcharacter\tmatches\tlast\tcharacter,\tthen\tis\ta\tpalindrome\tif\t\nmiddle\tsecSon\tis\ta\tpalindrome\t\t\n\t\n6.0001\tLECTURE\t6\t\n36\t\n\nEXAMPLE\r\n§ ‘Able\twas\tI,\tere\tI\tsaw\tElba’\tà\t‘ablewasiereisawleba’\t\n§ isPalindrome(‘ablewasiereisawleba’)\t\nis\tsame\tas\t\t\n◦ ‘a’ == ‘a’ and\t\nisPalindrome(‘blewasiereisawleb’)\n6.0001\tLECTURE\t6\t\n37\t\n\n6.0001\tLECTURE\t6\t\n38\t\ndef isPalindrome(s):\n    def toChars(s):\ns = s.lower()\nans = ''\nfor c in s:\nif c in 'abcdefghijklmnopqrstuvwxyz':\nans = ans + c\nreturn ans\n    def isPal(s):\nif len(s) <= 1:\nreturn True\nelse:\nreturn s[0] == s[-1] and isPal(s[1:-1])\n    return isPal(toChars(s))\n\t\n\t\n\nDIVIDE AND CONQUER\r\n§\tan\texample\tof\ta\t“divide\tand\tconquer”\talgorithm\t\n§\tsolve\ta\thard\tproblem\tby\tbreaking\tit\tinto\ta\tset\tof\tsub-\nproblems\tsuch\tthat:\t\n◦ sub-problems\tare\teasier\tto\tsolve\tthan\tthe\toriginal\t\n◦ soluSons\tof\tthe\tsub-problems\tcan\tbe\tcombined\tto\tsolve\t\nthe\toriginal\t\n6.0001\tLECTURE\t6\t\n39\n\nDICTIONARIES\r\n6.0001\tLECTURE\t6\t\n40\t\n\nHOW TO STORE  \nSTUDENT INFO\r\n§\tso\tfar,\tcan\tstore\tusing\tseparate\tlists\tfor\tevery\tinfo\t\nnames = ['Ana', 'John', 'Denise', 'Katy']\ngrade = ['B', 'A+', 'A', 'A']\ncourse = [2.00, 6.0001, 20.002, 9.01]\n§\ta\tseparate\tlist\tfor\teach\titem\t\n§\teach\tlist\tmust\thave\tthe\tsame\tlength\t\n§\tinfo\tstored\tacross\tlists\tat\tsame\tindex,\teach\tindex\trefers\tto\t\ninfo\tfor\ta\tdifferent\tperson\t\n\t\n6.0001\tLECTURE\t6\t\n41\t\n\nHOW TO UPDATE/RETRIEVE  \nSTUDENT INFO\r\ndef get_grade(student, name_list, grade_list, course_list):\n    i = name_list.index(student)\n    grade = grade_list[i]\n    course = course_list[i]\n    return (course, grade)\n§\tmessy\tif\thave\ta\tlot\tof\tdifferent\tinfo\tto\tkeep\ttrack\tof\t\n§\tmust\tmaintain\tmany\tlists\tand\tpass\tthem\tas\targuments\t\n§\tmust\talways\tindex\tusing\tintegers\t\n§\tmust\tremember\tto\tchange\tmulSple\tlists\t\n6.0001\tLECTURE\t6\t\n42\t\n\nA BETTER AND CLEANER WAY –  \nA DICTIONARY\r\n§\tnice\tto\tindex\titem\tof\tinterest\tdirectly\t(not\talways\tint)\t\n§\tnice\tto\tuse\tone\tdata\tstructure,\tno\tseparate\tlists\t\n\tA\tlist\t\t\t\tA\tdic0onary\t\n\t\nElem\t1\t\nElem\t2\t\nElem\t3\t\nElem\t4\t\n...\t\nKey\t1\t\nKey\t2\t\nKey\t3\t\nKey\t4\t\n...\t\nVal\t1\t\nVal\t2\t\nVal\t3\t\nVal\t4\t\n...\t\n0\t\n1\t\n2\t\n3\t\n...\t\n6.0001\tLECTURE\t6\t\n43\t\n\nA PYTHON DICTIONARY\r\n§\tstore\tpairs\tof\tdata\t\n•\tkey\t\n•\tvalue\t\nmy_dict = {} \ngrades = {'Ana':'B', 'John':'A+', 'Denise':'A', 'Katy':'A'} \nKey\t1\t\nKey\t2\t\nKey\t3\t\n...\t\nVal\t1\t\nVal\t2\t\nVal\t3\t\n...\t\nkey1\t\t\t\tval1\t\nkey2\t\t\t\t\tval2\t\nkey3\t\t\t\t\t\t\t\t\t\t\tval3\tkey4\t\t\t\t\t\tval4\t\n6.0001\tLECTURE\t6\t\n44\t\n'Ana' \n'Denise' \n'John' \n'Katy' \n'B' \n'A' \n'A+' \n'A' \n\n'Ana' \n'Denise' \n'John' \n'Katy' \n'B' \n'A' \n'A+' \nDICTIONARY LOOKUP\r\n§\tsimilar\tto\tindexing\tinto\ta\tlist\t\n§\tlooks\tup\tthe\tkey\t\n§\treturns\tthe\tvalue\tassociated\t\nwith\tthe\tkey\t\n'A' \n§\tif\tkey\tisn’t\tfound,\tget\tan\terror\t\ngrades = {'Ana':'B', 'John':'A+', 'Denise':'A', 'Katy':'A'} \ngrades['John']     à evaluates\tto\t'A+' \ngrades['Sylvan']  à gives\ta\tKeyError\t\n6.0001\tLECTURE\t6\t\n45\t\n\nDICTIONARY  \nOPERATIONS\r\ngrades = {'Ana':'B', 'John':'A+', 'Denise':'A', 'Katy':'A'} \n§\tadd\tan\tentry\t\ngrades['Sylvan'] = 'A'\n§\ttest\tif\tkey\tin\tdicSonary\t\n'John' in gradesàreturns True\n  'Daniel' in gradesàreturns False\n§\tdelete\tentry\t\ndel(grades['Ana'])\n6.0001\tLECTURE\t6\t\n46\t\n'Sylvan' \n'A' \n'Ana' \n'Denise' \n'John' \n'Katy' \n'B' \n'A' \n'A+' \n'A' \n\nDICTIONARY  \nOPERATIONS\r\ngrades = {'Ana':'B', 'John':'A+', 'Denise':'A', 'Katy':'A'} \n§\tget\tan\titerable\tthat\tacts\tlike\ta\ttuple\tof\tall\tkeys\t\n  grades.keys()   à returns ['Denise','Katy','John','Ana']\n§\tget\tan\titerable\tthat\tacts\tlike\ta\ttuple\tof\tall\tvalues\t\ngrades.values() à returns ['A', 'A', 'A+', 'B']\n6.0001\tLECTURE\t6\t\n47\t\n'Ana' \n'Denise' \n'John' \n'Katy' \n'B' \n'A' \n'A+' \n'A' \n\nDICTIONARY KEYS and VALUES\r\n§\tvalues\t\t\n•\tany\ttype\t(immutable\tand\tmutable)\t\n•\tcan\tbe\tduplicates\t\n•\tdicSonary\tvalues\tcan\tbe\tlists,\teven\tother\tdicSonaries!\t\n§\tkeys\t\n•\tmust\tbe\tunique\t\t\n•\timmutable\ttype\t(\nint,\tfloat,\tstring,\ttuple,bool)\t\n•actually\tneed\tan\tobject\tthat\tis\thashable,\tbut\tthink\tof\tas\timmutable\tas\tall\t\nimmutable\ttypes\tare\thashable\t\n•\tcareful\twith\tfloat\ttype\tas\ta\tkey\t\n§\tno\torder\tto\tkeys\tor\tvalues!\t\nd = {4:{1:0}, (1,3):\"twelve\", 'const':[3.14,2.7,8.44]}\t\n6.0001\tLECTURE\t6\t\n48\t\n\nlist vsdict\r\r\r \n6.0001\tLECTURE\t6\t\n49\t\n§\tordered\tsequence\tof\t\n§\tmatches\t“keys”\tto\t\nelements\t\n“values”\t\n§\tlook\tup\telements\tby\tan\t\n§\tlook\tup\tone\titem\tby\t\ninteger\tindex\nanother\titem\t\n§\tindices\thave\tan\torder\t\n§\tno\torder\tis\tguaranteed\t\n§\tindex\tis\tan\tinteger\t\n§\tkey\tcan\tbe\tany\t\nimmutable\ttype\t\n\nEXAMPLE: 3 FUNCTIONS TO \nANALYZE SONG LYRICS\r\n1)\tcreate\ta\tfrequency\tdic0onary\tmapping\tstr:int\n2)\tfind\tword\tthat\toccurs\tthe\tmost\tand\thow\tmany\tSmes\t\n•\tuse\ta\tlist,\tin\tcase\tthere\tis\tmore\tthan\tone\tword\t\n•\treturn\ta\ttuple\t(list,int)\tfor\t\t(words_list,\thighest_freq)\t\n3)\tfind\tthe\twords\tthat\toccur\tat\tleast\tX\t0mes\t\n•\tlet\tuser\tchoose\t“at\tleast\tX\tSmes”,\tso\tallow\tas\tparameter\t\n•\treturn\ta\tlist\tof\ttuples,\teach\ttuple\tis\ta\t(list, int)\ncontaining\tthe\tlist\tof\twords\tordered\tby\ttheir\tfrequency\t\n•\tIDEA:\tFrom\tsong\tdicSonary,\tfind\tmost\tfrequent\tword.\tDelete\t\nmost\tcommon\tw\nord.\tRepeat.\tIt\tworks\tbecause\tyou\tare\t\ng\tdicSonary.\t\n6.0001\tLECTURE\t6\t\n50\nmutaSng\tthe\tson\n\nCREATING A DICTIONARY\r\ndef lyrics_to_frequencies(lyrics):\n   myDict = {}\n   for word in lyrics: \nif word in myDict:  \nmyDict[word] += 1\nelse:\nmyDict[word] = 1\n   return myDict\n6.0001\tLECTURE\t6\t\n51\t\n\nUSING THE DICTIONARY\r\ndef most_common_words(freqs):\n    values = freqs.values()\n    best = max(values)\n    words = []\n    for k in freqs:\nif freqs[k] == best:\nwords.append(k)\n    return (words, best)\n6.0001\tLECTURE\t6\t\n52\n\nLEVERAGING DICTIONARY \nPROPERTIES\r\ndef words_often(freqs, minTimes):\n    result = []\n    done = False\n    while not done:\ntemp = most_common_words(freqs)\nif temp[1] >= minTimes:\nresult.append(temp)\nfor w in temp[0]:\ndel(freqs[w])\nelse:\ndone = True\n    return result   \nprint(words_often(b\neatles, 5))\n6.0001\tLECTURE\t6\t\n53\t\n\nFIBONACCI RECURSIVE CODE\r\ndef fib(n):\n    if n == 1:\nreturn 1\n    elif n == 2:\nreturn 2\n    else:\nreturn fib(n-1) + fib(n-2)\n§\ttwo\tbase\tcases\t\n§\tcalls\titself\ttwice\t\n§\tthis\tcode\tis\tinefficient\t\n6.0001\tLECTURE\t6\t\n54\t\n\nINEFFICIENT FIBONACCI \nfib(n) = fib(n-1) + fib(n-2) \n§\trecalcula0ng\tthe\tsame\tvalues\tmany\tSmes!\t\n§\tcould\tkeep\ttrack\tof\talready\tcalculated\tvalues\t\n6.0001\tLECTURE\t6\t\n55\t\nfib(5) \nfib(4) \nfib(3) \nfib(3) \nfib(2)\n \nfib(1) \nfib(2) fib(1) \nfib(2) \n\nFIBONACCI WITH A \nDICTIONARY\r\ndef fib_efficient(n, d):\n    if n in d:\nreturn d[n]\n    else:\nans = fib_efficient(n-1, d) + fib_efficient(n-2, d)\nd[n] = ans\nreturn ans\nd = {1:1, 2:2}\nprint(fib_efficient(6, d))\n§\tdo\ta\tlookup\tfirst\tin\tcase\talready\tcalculated\tthe\tvalue\t\n§\tmodify\tdic0onary\tas\tprogress\tthrough\tfuncSon\tcalls\t\n6.0001\tLECTURE\t6\t\n56\t\n\nEFFICIENCY GAINS\r\n§Calling\tfib(34)\tresults\tin\t11,405,773\trecursive\tcalls\tto\nthe\tprocedure\t\n§Calling\tfib_efficient(34)\tresults\tin\t65\trecursive\tcalls\tto\nthe\tprocedure\t\n§\tUsing\tdicSonaries\tto\tcapture\tintermediate\tresults\tcan\t\nbe\tvery\tefficient\t\n§\tBut\tnote\tthat\tthis\tonly\tworks\tfor\tprocedures\twithout\t\nside\teffects\t(i.e.,\tthe\tprocedure\twill\talways\tproduce\tthe\t\nsame\tresult\tfor\ta\tspecific\targument\tindependent\tof\tany\t\nother\tcomputaSons\tbetween\tcalls)\t\n6.0001\tLECTURE\t6\t\n57\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall 2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  },
  {
    "filename": "lecture6.pdf.pdf",
    "content": "TESTING, DEBUGGING, \nEXCEPTIONS, ASSERTIONS\n(download slides and .pyfiles and follow along!)\n6.0001 LECTURE 7\n6.0001 LECTURE 7\n1\n\nWE AIM FOR HIGH QUALITY –\nAN ANALOGY WITH SOUP\nYou are making soup but bugs keep falling in from the \nceiling. What do you do?\ncheck soup for bugs\n•testing\nkeep lid closed\n•defensive \nprogramming\nclean kitchen\n•eliminate source \nof bugs\nAnalogy thanks to Prof Srini Devadas\n6.0001 LECTURE 7\n2\n\nDEFENSIVE PROGRAMMING\n•Write specificationsfor functions\n•Modularizeprograms\n•Check conditionson inputs/outputs (assertions)\nTESTING/VALIDATION\n•Compareinput/output \npairs to specification\n•“It’s not working!”\n•“How can I break my \nprogram?”\nDEBUGGING\n•Study events leading up \nto an error\n•“Why is it not working?”\n•“How can I fix my \nprogram?”\n6.0001 LECTURE 7\n3\n\nSET YOURSELF UP FOR EASY \nTESTING AND DEBUGGING\nfrom the start, design code to ease this part\nbreak program up into modulesthat can be tested \nand debugged individually\ndocument constraintson modules\n•what do you expect the input to be?\n•what do you expect the output to be?\ndocument assumptionsbehind code design\n6.0001 LECTURE 7\n4\n\nWHEN ARE YOU READY TO \nTEST?\nensure code runs\n•remove syntax errors\n•remove static semantic errors\n•Python interpreter can usually find these for you\nhave a set of expected results\n•an input set\n•for each input, the expected output\n6.0001 LECTURE 7\n5\n\nCLASSES OF TESTS\nUnit testing\n•validate each piece of program\n•testing each function separately\nRegression testing\n•add test for bugs as you find them\n•catch reintroduced errors that were previously fixed\nIntegration testing\n•does overall program work?\n•tend to rush to do this\n6.0001 LECTURE 7\n6\n\nTESTING APPROACHES\nintuitionabout natural boundaries to the problem\ndefis_bigger(x, y):\n\"\"\" Assumes x and y are ints\nReturns True if y is less than x, else False \"\"\"\n•can you come up with some natural partitions?\nif no natural partitions, might do random testing\n•probability that code is correct increases with more tests\n•better options below\nblack box testing\n•explore paths through specification\nglass box testing\n•explore paths through code\n6.0001 LECTURE 7\n7\n\ndefsqrt(x, eps):\n\"\"\" Assumes x, eps floats, x >= 0, eps > 0\nReturns res such that x-eps <= res*res <= x+eps\"\"\"\ndesigned withoutlookingat the code\ncan be done by someone other than the implementer to \navoid some implementer biases\ntesting can be reusedif implementation changes\npathsthrough specification \n•build test cases in different natural space partitions\n•also consider boundary conditions (empty lists, singleton \nlist, large numbers, small numbers)\nBLACK BOX TESTING\n6.0001 LECTURE 7\n8\n\ndefsqrt(x, eps):\n\"\"\" Assumes x, eps floats, x >= 0, eps > 0\nReturns res such that x-eps <= res*res <= x+eps\"\"\"\nBLACK BOX TESTING\n6.0001 LECTURE 7\n9\nCASExeps\nboundary00.0001\nperfect square250.0001\nless than 10.050.0001\nirrational square root20.0001\nextremes21.0/2.0**64.0\nextremes1.0/2.0**64.0 1.0/2.0**64.0\nextremes2.0**64.0     1.0/2.0**64.0\nextremes1.0/2.0**64.0 2.0**64.0\nextremes2.0**64.0     2.0**64.0\n\nGLASS BOX TESTING\nuse codedirectly to guide design of test cases \ncalled path-completeif every potential path through \ncode is tested at least once\nwhat are some drawbacksof this type of testing?\n•can go through loops arbitrarily many times\n•missing paths\nguidelines \n•branches\n•for loops\n•while loops\n6.0001 LECTURE 7\n10\n\nGLASS BOX TESTING\ndefabs(x):\n\"\"\" Assumes x is an int\nReturns x if x>=0 and –x otherwise \"\"\"\nif x < -1:\nreturn –x\nelse:\nreturn x\na path-complete test suite could miss a bug\npath-complete test suite: 2 and -2\nbut abs(-1) incorrectly returns -1\nshould still test boundary cases\n6.0001 LECTURE 7\n11\n\nDEBUGGING\nsteep learning curve\ngoal is to have a bug-free program\ntools\n•built in to IDLE and Anaconda\n•Python Tutor\n•printstatement\n•use your brain, be systematicin your hunt\n6.0001 LECTURE 7\n12\n\nPRINT STATEMENTS\ngood way to test hypothesis\nwhen to print\n•enter function\n•parameters\n•function results\nuse bisection method\n•put print halfway in code\n•decide where bug may be depending on values\n6.0001 LECTURE 7\n13\n\nDEBUGGING STEPS\nstudy program code\n•don’t ask what is wrong\n•ask how did I get the unexpected result \n•is it part of a family?\nscientific method\n•study available data\n•form hypothesis\n•repeatable experiments\n•pick simplest input to test with\n6.0001 LECTURE 7\n14\n\nERROR MESSAGES \n–\nEASY\ntrying to access beyond the limits of a list\ntest = [1,2,3]then      test[4]IndexError\ntrying to convert an inappropriate type\nint(test)TypeError\nreferencing a non-existent variable  \naNameError\nmixing data types without appropriate coercion\n'3'/4TypeError\nforgetting to close parenthesis, quotation, etc. \na= len([1,2,3]\nprint(a)SyntaxError\n6.0001 LECTURE 7\n15\n\nLOGIC ERRORS -HARD\nthinkbefore writing new code\ndrawpictures, take a break\nexplainthe code to \n•someone else\n•a rubber ducky\n6.0001 LECTURE 7\n16\n\nDON’TDO\n•Write entire program\n•Test entire program\n•Debug entire program\n•Write a function\n•Test the function, debug the function\n•Write a function\n•Test the function, debug the function\n•*** Do integration testing ***\n•Change code\n•Remember where bug was\n•Test code\n•Forget where bug was or what change \nyou made\n•Panic\n•Backup code\n•Change code\n•Write down potential bug in a \ncomment\n•Test code\n•Compare new version with old \nversion\n6.0001 LECTURE 7\n17\n\nEXCEPTIONS AND ASSERTIONS\nwhat happens when procedure execution hits an \nunexpected condition?\nget an exception... to what was expected\n•trying to access beyond list limits \ntest = [1,7,4]\ntest[4]IndexError\n•trying to convert an inappropriate type \nint(test)TypeError\n•referencing a non-existing variable \naNameError\n•mixing data types without coercion \n'a'/4TypeError\n6.0001 LECTURE 7\n18\n\nOTHER TYPES OF EXCEPTIONS\nalready seen common error types:\n•SyntaxError: Python can’t parse program\n•NameError: local or global name not found\n•AttributeError: attribute reference fails\n•TypeError: operand doesn’t have correct type\n•ValueError: operand type okay, but value is illegal\n•IOError: IO system reports malfunction (e.g. file not \nfound)\n6.0001 LECTURE 7\n19\n\nDEALING WITH EXCEPTIONS\nPython code can provide handlers for exceptions\ntry:\na = int(input(\"Tell me one number:\"))\nb = int(input(\"Tell me another number:\"))\nprint(a/b)\nexcept:\nprint(\"Bug in user input.\")\nexceptions raisedby any statement in body of tryare \nhandledby the exceptstatement and execution continues \nwith the body of the exceptstatement\n6.0001 LECTURE 7\n20\n\nHANDLING SPECIFIC \nEXCEPTIONS\nhave separate exceptclauses to deal with a particular \ntype of exception\ntry:\na = int(input(\"Tell me one number: \"))\nb = int(input(\"Tell me another number: \"))\nprint(\"a/b = \", a/b)\nprint(\"a+b= \", a+b)\nexcept ValueError:\nprint(\"Could not convert to a number.\")\nexcept ZeroDivisionError:\nprint(\"Can't divide by zero\")\nexcept:\nprint(\"Something went very wrong.\")\n6.0001 LECTURE 7\n21\n\nOTHER EXCEPTIONS\nelse:\n•body of this is executed when execution of associated \ntrybody completes with no exceptions\nfinally:\n•body of this is always executed after try,  elseand \nexceptclauses, even if they raised another error or \nexecuted a break, continueor return\n•useful for clean-up code that should be run no matter \nwhat else happened (e.g. close a file)\n6.0001 LECTURE 7\n22\n\nWHAT TO DO WITH \nEXCEPTIONS?\nwhat to do when encounter an error?\nfail silently: \n•substitute default values or just continue\n•bad idea! user gets no warning\nreturn an “error” value\n•what value to choose?\n•complicates code having to check for a special value\nstop execution, signal error condition\n•in Python: raise an exception\nraise Exception(\"descriptive string\")\n6.0001 LECTURE 7\n23\n\nEXCEPTIONS AS CONTROL \nFLOW\ndon’t return special values when an error occurred \nand then check whether ‘error value’ was returned\ninstead, raise an exception when unable to produce a \nresult consistent with function’s specification\nraise <exceptionName>(<arguments>)\nraise ValueError(\"something is wrong\")\n6.0001 LECTURE 7\n24\n\nEXAMPLE: RAISING AN \nEXCEPTION\ndefget_ratios(L1, L2):\n\"\"\" Assumes: L1 and L2 are lists of equal length of numbers\nReturns: a list containing L1[i]/L2[i] \"\"\"\nratios = []\nfor index in range(len(L1)):\ntry:\nratios.append(L1[index]/L2[index])\nexcept ZeroDivisionError:\nratios.append(float('nan')) #nan = not a number\nexcept:\nraise ValueError('get_ratioscalled with bad arg')\nreturn ratios\n6.0001 LECTURE 7\n25\n\nEXAMPLE OF EXCEPTIONS\nassume we are given a class listfor a subject: each \nentry is a list of two parts\n•a list of first and last name for a student\n•a list of grades on assignments\ncreate a new class list, with name, grades, and an \naverage\n6.0001 LECTURE 7\n26\ntest_grades= [[['peter', 'parker'], [80.0, 70.0, 85.0]], \n[['bruce', 'wayne'], [100.0, 80.0, 74.0]]]\n[[['peter', 'parker'], [80.0, 70.0, 85.0], 78.33333], \n[['bruce', 'wayne'], [100.0, 80.0, 74.0], 84.666667]]]\n\nEXAMPLE \nCODE\ndefget_stats(class_list):\nnew_stats= []\nfor eltin class_list:\nnew_stats.append([elt[0], elt[1], avg(elt[1])])\nreturn new_stats\ndefavg(grades):\nreturn sum(grades)/len(grades)\n6.0001 LECTURE 7\n27\n[[['peter', 'parker'], [80.0, 70.0, 85.0]], \n[['bruce', 'wayne'], [100.0, 80.0, 74.0]]]\n\nERROR IF NO GRADE FOR A \nSTUDENT\nif one or more students don’t have any grades, \nget an error\ntest_grades= [[['peter', 'parker'], [10.0, 5.0, 85.0]], \n[['bruce', 'wayne'], [10.0, 8.0, 74.0]],\n[['captain', 'america'], [8.0,10.0,96.0]],\n[['deadpool'], []]]\nget ZeroDivisionError: float division by zero\nbecause try to \nreturn sum(grades)/len(grades)\n6.0001 LECTURE 7\n28\n\nOPTION 1: FLAG THE ERROR \nBY PRINTING A MESSAGE\ndecide to notifythat something went wrong with a msg\ndefavg(grades):\ntry:\nreturn sum(grades)/len(grades)\nexcept ZeroDivisionError:\nprint('warning: no grades data')\nrunning on some test data gives\nwarning: no grades data\n[[['peter', 'parker'], [10.0, 5.0, 85.0], 15.41666666], \n[['bruce', 'wayne'], [10.0, 8.0, 74.0], 13.83333334], \n[['captain', 'america'], [8.0, 10.0, 96.0], 17.5],\n[['deadpool'], [], None]]\n6.0001 LECTURE 7\n29\n\nOPTION 2: CHANGE THE POLICY\ndecide that a student with no grades gets a zero\ndefavg(grades):\ntry:\nreturn sum(grades)/len(grades)\nexcept ZeroDivisionError:\nprint('warning: no grades data')\nreturn 0.0\nrunning on some test data gives\nwarning: no grades data\n[[['peter', 'parker'], [10.0, 5.0, 85.0], 15.41666666], \n[['bruce', 'wayne'], [10.0, 8.0, 74.0], 13.83333334], \n[['captain', 'america'], [8.0, 10.0, 96.0], 17.5],\n[['deadpool'], [], 0.0]]\n6.0001 LECTURE 7\n30\n\nASSERTIONS\nwant to be sure that assumptions on state of \ncomputation are as expected\nuse an assertstatement to raise an \nAssertionErrorexception if assumptions not met\nan example of good defensive programming\n31\n6.0001 LECTURE 7\n\nEXAMPLE\ndefavg(grades):\nassert len(grades) != 0, 'no grades data'\nreturn sum(grades)/len(grades)\nraises an AssertionErrorif it is given an empty list for \ngrades\notherwise runs ok\n32\n6.0001 LECTURE 7\n\nASSERTIONS AS DEFENSIVE \nPROGRAMMING\nassertions don’t allow a programmer to control \nresponse to unexpected conditions\nensure that execution halts whenever an expected \ncondition is not met\ntypically used to check inputs to functions, but can be \nused anywhere\ncan be used to check outputs of a function to avoid \npropagating bad values\ncan make it easier to locate a source of a bug\n33\n6.0001 LECTURE 7\n\nWHERE TO USE ASSERTIONS?\ngoal is to spot bugs as soon as introduced and make \nclear where they happened\nuse as a supplementto testing\nraise exceptionsif users supplies bad datainput\nuse assertionsto\n•check typesof arguments or values\n•check that invariantson data structures are met\n•check constraintson return values\n•check for violationsof constraints on procedure (e.g. no \nduplicates in a list)\n34\n6.0001 LECTURE 7\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
  }
]